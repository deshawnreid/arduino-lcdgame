#include <Wire.h> //Library allows us to communicate with I2C devices MEGA : SDA 20 SCL 21
#include <LiquidCrystal_I2C.h> // Library allows communication with LCDS using I2C
LiquidCrystal_I2C lcd(0x27, 16, 2); // Address of adapter, display length, display height 


//STEP TWO: character creation
//EACH DIGIT IS 5X8 PIXELS, WE USE BITMAPPING TO DEFINE AND CREATE OUR CHARACTERS(sprites)
byte heart[8] = { B00000, // B stands for binary formatter and the five numbers are the pixels
  B01010,
  B11111,
  B11111,
  B01110,
  B00100,
  B00000,
  B00000 };

byte heartbreaker[8] = { B11111, 
  B10101,
  B11111,
  B01010,
  B01110,
  B11111,
  B01110,
  B01110 };

byte bullet[8] = { B00000, 
  B00000,
  B00000,
  B00110,
  B00110,
  B00000,
  B00000,
  B00000 };

//STEP FOUR CONT: lcd array used to debug the game 
String lcd_array[2][16] = 
  {{"}"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
   {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "}};

// } - heartbreaker
// > - bullet
// < - heart

//STEP FOUR: game variable creation
const unsigned int MAX_MESSAGE_LENGTH = 12;
int heartbreaker_position = 0;
bool game_is_in_progress = false; //variable keeping track if the game is in progress
unsigned long game_score = 0;
unsigned long game_start = 0;
bool bullet_is_in_progress = false; //bullet state variable
int bullet_position[2];
unsigned long bullet_last_move = 0; //keeps track of the bullets last move (collision  purposes)
unsigned long bullet_speed = 100;
bool heart_array[5] = {false,false,false,false,false};//{false,true,true,true,true};//
long randNumber;
int heart_position[5][2] = {{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1}};
unsigned long heart_last_move[5] = {0,0,0,0,0};
unsigned long heart_overall_last_move = 0;
unsigned long heart_speed = 200;
int hearts_broken = 0;

char message[MAX_MESSAGE_LENGTH] = ""; //w - up, s - down, f - fire

//STEP THREE: INPUT PARAMETER SET UP 
//arduino pin orientation
const int shoot_pin = 30; // digital input pins (using const int because these will be constant)
const int up_pin = 32;
const int down_pin = 34; 


void setup() {
  //STEP ONE : initiate and display text
  Serial.begin(9600);
  //lcd.begin(16,2); //initiates the lcd (needs 16,2 as parameters to compile) //ran into problems with this
  lcd.init(); //this function serves the initiation better with this library

  //STEP TWO CONT: initiate custom chars
  lcd.createChar(1,heart);
  lcd.createChar(2,heartbreaker);
  lcd.createChar(3,bullet);
  
  //STEP ONE CONT: initiate random
  randomSeed(analogRead(0));
  
  //STEP THREE CONT: initiate input pins
  pinMode(shoot_pin, INPUT_PULLUP); //we are using switches without resistors
  pinMode(up_pin, INPUT_PULLUP);
  pinMode(down_pin, INPUT_PULLUP); 
  digitalWrite(shoot_pin, HIGH); //need to set input to high since we are utilizing INPUT_PULLUP 
  digitalWrite(up_pin, HIGH); //internal arduino resistors being utiilized
  digitalWrite(down_pin, HIGH);

  //STEP ONE CONT: 
  lcd.backlight(); //turns on lcd backlight
  lcd.clear(); //clears the display
  lcd.setCursor(0,0); // sets cursor to the written position (x,y)
  lcd.print(char(1));
  lcd.print("HEART BREAKER");
  lcd.print(char(1));
  lcd.setCursor(3,1);
  lcd.print("BY DDR"); // developed by Deshawn Reid (comment this out for yourself) 
}

void loop(){

  //STEP THREE CONT: INPUT COMMANDS(PUSH BUTTONS)
  if(digitalRead(shoot_pin)==LOW){
    message[0] = 'f';               //PIN : 30
  }
  if(digitalRead(up_pin)==LOW){
    message[0] = 'w';               //PIN : 32
  }
  if(digitalRead(down_pin)==LOW){
    message[0] = 's';               //PIN : 34
  }
  
  //STEP 6: STARTING THE GAME
  if (game_is_in_progress==false && (message[0] == 'w' || message[0] == 's' || message[0] == 'f')){
    
    game_is_in_progress = true;
    game_start = millis(); //keeps track of the time since the game has started (we will use this to keep track of time (for movement purposes))

  }

  if(game_is_in_progress){

    //STEP SEVEN : PROCESSING INPUT 
    //UP COMMAND
    if(message[0] == 'w'){
      
      heartbreaker_position = 0;

    }
    //DOWN COMMAND
    else if(message[0] == 's'){
      
      heartbreaker_position = 1;

    }
    //FIRE COMMAND
    else if(message[0] == 'f' && bullet_is_in_progress == false){
      
      bullet_position[0] = heartbreaker_position;
      bullet_position[1] = 1;
      bullet_is_in_progress = true;
      bullet_last_move = millis();
     
    }

    //STEP EIGHT: MOVEMENT AND HEART INITIATION(the array)
    //BULLET MOVEMENT
    if(bullet_is_in_progress && bullet_last_move+bullet_speed <= millis()){
      
      
      if(bullet_position[1] != 15){
        Serial.println("moving bullet");
        bullet_last_move = millis();
        bullet_position[1] = bullet_position[1]+1;
      }
      else if(bullet_position[1] == 15){
        bullet_position[1] = -1;
        bullet_is_in_progress = false;
      }
      
    }

    
    
    //INITIATING HEARTS
    if((heart_array[0]==false || heart_array[1]==false || 
       heart_array[2]==false || heart_array[3]==false || heart_array[4]==false) &&
       heart_overall_last_move+heart_speed*3 <= millis() ){
      
      randNumber = random(0, 6); //a random number from 0 to 6
    
      if(randNumber==0 || randNumber==1){
      
        for(int i=0; i<5; i++){
          if(heart_array[i]==false){
            lcd_array[randNumber][15]="<";
            heart_array[i]=true;
            heart_position[i][0] = randNumber;
            heart_position[i][1] = 15;
            heart_last_move[i] = millis();
            heart_overall_last_move = millis();
          
            break;
          }
        }
      }
    }

        
    //MOVING THE HEARTS
    for(int i=0; i<5; i++){
      if(heart_array[i]==true && heart_last_move[i]+heart_speed <= millis()){
        heart_position[i][1] = heart_position[i][1] - 1;
        heart_last_move[i] = millis();
      }
      //if HEART passes through HEARTBREAKER
      if(heart_position[i][1]==-1){
        heart_array[i]=false;
      }

    }
    
    //STEP NINE: DRAWING CHARACTERS(SPRITES) AND COLLISIONS
    //UPDATE the lcd_array and check collisions
    for(int i=0;i<2;i++){
      
      for(int j=0;j<16;j++){

        if(game_is_in_progress){
          lcd_array[i][j] = " ";    //all cells are blank by default
          
          
          //DRAWING HEARTBREAKER
          if(heartbreaker_position==i && j==0){
            lcd_array[i][j] = "}";
          }
  
          //DRAWING BULLET
          if(bullet_is_in_progress == true && bullet_position[0] == i && 
          bullet_position[1] == j){
            lcd_array[i][j] = ">";
          }
  
          //DRAWING HEARTS
          for(int k=0; k<5; k++){
            if(heart_array[k]==true && heart_position[k][0] == i 
            && heart_position[k][1] == j){
              lcd_array[i][j]="<";
            }
          }
  
          //BULLET and HEART collision
          for(int k=0; k<5; k++){
            if(bullet_is_in_progress == true && bullet_position[0] == i && 
            bullet_position[1] == j &&
            ((heart_array[k]==true && heart_position[k][0] == i 
            && heart_position[k][1] == j) || 
            (heart_array[k]==true && heart_position[k][0] == i 
            && heart_position[k][1] == j-1) )
            ){
              //Serial.println("bullet and heart collision");
              heart_array[k] = false;
              heart_position[k][0] = -1; 
              heart_position[k][1] = -1;
              bullet_is_in_progress = false;
              bullet_position[0] = -1;
              bullet_position[1] = -1;
              
              lcd_array[i][j]=" ";
              hearts_broken++; 
            }
            
          }
          
          //HEARTBREAKER and HEART collision
          if(j==0 && heartbreaker_position==i){
            for(int k=0; k<5; k++){
              if(heart_array[k]==true && heart_position[k][0] == i 
              && heart_position[k][1] == j){

                game_score = millis() - game_start;
                //need to reset all game values
                heartbreaker_position = 0;
                game_is_in_progress = false;
                bullet_is_in_progress = false;

                for(int z=0; z<5; z++){
                  heart_array[z] = false;
                  heart_position[z][0] = -1;
                  heart_position[z][1] = -1;
                }
                
                
                heart_speed = 200;
                message[MAX_MESSAGE_LENGTH] = ""; //w - UP, s - Down, f - Fire

                break;
            }
            
          }
          }
        }

        
      }
    }
    
    //Printing game to lcd
    for(int i=0;i<2;i++){
      lcd.setCursor(0,i);
      for(int j=0;j<16;j++){
        
        if(lcd_array[i][j] == "}"){
          lcd.print(char(2));
        }
        else if(lcd_array[i][j] == "<"){
          lcd.print(char(1));
        }
        else if(lcd_array[i][j] == ">"){
          lcd.print(char(3));
        }
        else{
          lcd.print(lcd_array[i][j]);
        }
        
      }
    }
    
  }

  //STEP TEN: END GAME SCREEN
  else{
    if(game_score!=0){
      
      //Game over screen
      lcd.clear();
      lcd.setCursor(2,0);
      lcd.print(char(1));
      lcd.print("GAME OVER");
      lcd.print(char(1));
      lcd.setCursor(0,1);
      lcd.print("HEARTS BROKEN:");
      lcd.print(hearts_broken);

      game_score = 0;//reset game score for next game
      hearts_broken = 0; // reset hearts broken for next game
    }
  }

  delay(50);
  message[0] = ' '; //reset commands (inputs)

}
